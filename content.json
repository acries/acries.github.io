{"meta":{"title":"acries","subtitle":"超越，哪怕一点点","description":null,"author":"acries","url":"http://yoursite.com"},"pages":[{"title":"分类","date":"2017-11-02T06:54:53.000Z","updated":"2017-11-02T06:54:53.000Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2017-10-31T11:30:05.000Z","updated":"2017-11-01T14:09:53.000Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"邮件：acries@126.com"},{"title":"categories","date":"2017-10-31T11:28:28.000Z","updated":"2017-11-02T06:48:36.000Z","comments":true,"path":"categories1/index.html","permalink":"http://yoursite.com/categories1/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-10-31T11:29:56.000Z","updated":"2017-11-02T06:48:44.000Z","comments":true,"path":"tags1/index.html","permalink":"http://yoursite.com/tags1/index.html","excerpt":"","text":""},{"title":"标签","date":"2017-11-02T06:54:19.000Z","updated":"2017-11-02T06:54:19.000Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"ThreadLocal原理","slug":"ThreadLocal原理","date":"2017-11-01T06:08:33.000Z","updated":"2017-11-01T13:52:36.000Z","comments":true,"path":"2017/11/01/ThreadLocal原理/","link":"","permalink":"http://yoursite.com/2017/11/01/ThreadLocal原理/","excerpt":"","text":"ThreadLocal原理以及使用场景原理介绍 每一个线程的Thread对象中都有一个ThreadLocalMap对象，这个对象存储了一组以Thread.threadLocalHashCode为键，以本地线程变量为值的K-V值对，ThreadLocal对象就是当前线程的ThreadLocalMap的访问入口，每一个ThreadLocal对象都包含了独一无二的threadLocalHashCode值，使用这个值就可以在线程K-V值对中找回对应的本地线程。 Thread中ThreadLocalMap对象 ThreadLocal.ThreadLocalMap inheritableThreadLocals = null; ThreadLocalMap设置K-V int K = ThreadLocal; int i = K.threadLocalHashCode &amp; (table.length - 1); Object V = new Entry(ThreadLocal, value); table[i] = V; 获取Vint K = ThreadLocal;int i = K.threadLocalHashCode &amp; (table.length - 1);Object V = inheritableThreadLocals.table[i].value;使用场景 Web容器默认采用单实例（Servlet）多线程的方式来处理Http请求。Servlet处理Http请求的方法中如果对Servlet类中非线程安全的实例变量（例如：private int count）进行写操作，就会产生线程安全的问题，相对应的一种解决方式，就是在Servlet类中定义一个ThreadLocal变量存储，就不会有线程安全的问题。 读写分离, DynamicDataSourceHolder存储方法上注解@DataSource属性value所对应的值，用于设置AbstractRoutingDataSource中方法determineCurrentLookupKey()返回值。","categories":[{"name":"多线程","slug":"多线程","permalink":"http://yoursite.com/categories/多线程/"}],"tags":[{"name":"thread","slug":"thread","permalink":"http://yoursite.com/tags/thread/"}]}]}